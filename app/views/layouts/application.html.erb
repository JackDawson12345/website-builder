<!DOCTYPE html>
<html>
<head>
  <title>Website Builder</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>

  <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
  <%= javascript_importmap_tags %>

  <!-- Tailwind CSS CDN -->
  <script src="https://cdn.tailwindcss.com"></script>

  <style>
      /* Sidebar edit panel animations */
      #edit-sidebar {
          transition: all 0.3s ease-in-out;
          transform: translateX(-20px);
          opacity: 0;
      }

      #edit-sidebar.sidebar-visible {
          transform: translateX(0);
          opacity: 1;
      }

      /* Component container styles */
      .component-container {
          transition: all 0.3s ease;
      }

      .component-container:hover {
          border-color: #3b82f6;
          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      }

      .component-container.editing {
          border-color: #3b82f6;
          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
          cursor: default;
      }

      /* Form field styles */
      .component-field:focus {
          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
          border-color: #3b82f6;
      }

      .field-error {
          border-color: #ef4444;
          box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
      }

      .field-success {
          border-color: #10b981;
          box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
      }

      .field-error-message {
          color: #ef4444;
          font-size: 0.75rem;
          margin-top: 0.25rem;
      }

      /* Edit overlay */
      .edit-overlay {
          opacity: 0;
          transition: opacity 0.2s ease;
          pointer-events: none;
      }

      .clickable-preview:hover .edit-overlay {
          opacity: 1;
      }

      /* Loading spinner */
      .loading-spinner {
          display: inline-block;
          width: 16px;
          height: 16px;
          border: 2px solid #f3f4f6;
          border-top: 2px solid #3b82f6;
          border-radius: 50%;
          animation: spin 1s linear infinite;
      }

      @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
      }

      /* Notification animations */
      @keyframes slideInRight {
          from {
              transform: translateX(100%);
              opacity: 0;
          }
          to {
              transform: translateX(0);
              opacity: 1;
          }
      }

      @keyframes slideOutRight {
          from {
              transform: translateX(0);
              opacity: 1;
          }
          to {
              transform: translateX(100%);
              opacity: 0;
          }
      }

      /* Page fade in */
      .page-content {
          animation: fadeIn 0.3s ease-in-out;
      }

      @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
      }
  </style>
</head>

<body class="bg-gray-50 min-h-screen">
<% if user_signed_in? %>
  <nav class="bg-white shadow-sm border-b">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between h-16">
        <div class="flex items-center">
          <%= link_to "Website Builder", root_path, class: "text-xl font-bold text-gray-900" %>
        </div>

        <div class="flex items-center space-x-4">
          <% if current_user.admin? %>
            <%= link_to "Components", admin_components_path, class: "text-gray-600 hover:text-gray-900" %>
            <%= link_to "Themes", admin_themes_path, class: "text-gray-600 hover:text-gray-900" %>
            <%= link_to "Dashboard", admin_root_path, class: "text-gray-600 hover:text-gray-900" %>
          <% else %>
            <%= link_to "My Website", customer_website_path, class: "text-gray-600 hover:text-gray-900" %>
            <%= link_to "Dashboard", customer_root_path, class: "text-gray-600 hover:text-gray-900" %>
          <% end %>

          <div class="relative">
            <span class="text-gray-600"><%= current_user.email %></span>
            <%= button_to "Sign Out", destroy_user_session_path,
                          method: :delete,
                          class: "ml-3 text-red-600 hover:text-red-800 bg-transparent border-0 p-0 cursor-pointer",
                          form_class: "inline" %>
          </div>
        </div>
      </div>
    </div>
  </nav>
<% end %>

<main class="flex-1 page-content">
  <% if notice %>
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mx-4 mt-4">
      <%= notice %>
    </div>
  <% end %>

  <% if alert %>
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mx-4 mt-4">
      <%= alert %>
    </div>
  <% end %>

  <%= yield %>
</main>

<script>
    // Website Builder with Sidebar Editing
    class WebsiteBuilder {
        constructor() {
            this.init();
            this.unsavedChanges = new Set();
        }

        init() {
            this.bindEvents();
            this.setupAutoSave();
            this.setupBeforeUnload();
        }

        bindEvents() {
            this.bindEditToggles();
            this.bindLivePreview();
            this.bindSaveAll();
            this.bindKeyboardShortcuts();
        }

        bindEditToggles() {
            // Show edit form in sidebar when clicking on component
            document.querySelectorAll('.component-container, .clickable-preview').forEach(element => {
                element.addEventListener('click', (e) => {
                    if (e.target.closest('form, button, a, input, textarea, select')) {
                        return;
                    }

                    e.preventDefault();
                    e.stopPropagation();

                    const componentId = element.dataset.component;
                    this.showEditSidebar(componentId);
                });
            });

            // Close sidebar
            document.getElementById('close-sidebar-btn')?.addEventListener('click', (e) => {
                e.preventDefault();
                this.hideEditSidebar();
            });

            // Close sidebar when clicking outside
            document.addEventListener('click', (e) => {
                const sidebar = document.getElementById('edit-sidebar');
                const componentContainers = document.querySelectorAll('.component-container');

                if (sidebar && !sidebar.contains(e.target) &&
                  !Array.from(componentContainers).some(container => container.contains(e.target))) {
                    this.hideEditSidebar(); // This will call hideEditSidebar which removes the class
                }
            });
        }

        bindLivePreview() {
            // Live preview is handled in the sidebar form binding
        }

        bindSaveAll() {
            const saveAllBtn = document.getElementById('save-all-btn');
            if (saveAllBtn) {
                saveAllBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    this.saveAllComponents();
                });
            }
        }

        bindKeyboardShortcuts() {
            document.addEventListener('keydown', (e) => {
                if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                    e.preventDefault();
                    this.saveAllComponents();
                }

                if (e.key === 'Escape') {
                    this.hideEditSidebar();
                }
            });
        }

        setupAutoSave() {
            setInterval(() => {
                if (this.unsavedChanges.size > 0) {
                    this.autoSave();
                }
            }, 120000); // 2 minutes
        }

        setupBeforeUnload() {
            window.addEventListener('beforeunload', (e) => {
                if (this.unsavedChanges.size > 0) {
                    e.preventDefault();
                    e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
                    return e.returnValue;
                }
            });
        }



        showEditSidebar(componentId) {
            const componentContainer = document.getElementById(`component-${componentId}`);
            const sidebar = document.getElementById('edit-sidebar');
            const previewSection = document.querySelector('.edit-preview-section')
            const titleElement = document.getElementById('edit-component-title');
            const typeElement = document.getElementById('edit-component-type');
            const formContainer = document.getElementById('edit-form-container');

            if (!componentContainer || !sidebar || !formContainer) return;

            this.clearEditingStates();

            // Get component data from data attributes
            const componentData = {
                component_id: componentContainer.dataset.component,
                action_url: componentContainer.dataset.actionUrl,
                current_page: componentContainer.dataset.currentPage,
                editable_fields: componentContainer.dataset.editableFields ?
                  componentContainer.dataset.editableFields.split(',') : [],
                current_values: {}
            };

            // Parse current values safely
            try {
                const currentValuesStr = componentContainer.dataset.currentValues;
                if (currentValuesStr) {
                    componentData.current_values = JSON.parse(currentValuesStr.replace(/&quot;/g, '"'));
                }
            } catch (e) {
                console.warn('Failed to parse current values:', e);
                componentData.current_values = {};
            }

            // Update sidebar header
            const componentName = componentContainer.dataset.componentName || 'Component';
            const componentType = componentContainer.dataset.componentType || 'Unknown';

            if (titleElement) titleElement.textContent = `Edit ${componentName}`;
            if (typeElement) typeElement.textContent = componentType;

            // Generate form HTML
            const formHtml = this.generateEditForm(componentData);
            formContainer.innerHTML = formHtml;

            // Show sidebar with animation
            sidebar.classList.remove('hidden');

            if (previewSection) {
                previewSection.classList.add('sidebar-open');
            }

            setTimeout(() => {
                sidebar.classList.add('sidebar-visible');
            }, 10);

            // Mark component as being edited
            componentContainer.classList.add('editing');

            // Focus first field
            const firstField = formContainer.querySelector('.component-field');
            if (firstField) {
                setTimeout(() => firstField.focus(), 200);
            }

            // Bind form submission
            this.bindSidebarForm(componentData);
        }

        hideEditSidebar() {
            const sidebar = document.getElementById('edit-sidebar');
            const formContainer = document.getElementById('edit-form-container');
            const previewSection = document.querySelector('.edit-preview-section');

            if (sidebar) {
                sidebar.classList.remove('sidebar-visible');

                // Remove class from preview section when sidebar closes
                if (previewSection) {
                    previewSection.classList.remove('sidebar-open');
                }

                setTimeout(() => {
                    sidebar.classList.add('hidden');
                    if (formContainer) formContainer.innerHTML = '';
                }, 300);
            }

            this.clearEditingStates();
        }

        clearEditingStates() {
            document.querySelectorAll('.component-container.editing').forEach(container => {
                container.classList.remove('editing');
            });
        }

        generateEditForm(componentData) {
            const { component_id, action_url, current_page, editable_fields, current_values } = componentData;

            let formHtml = `
            <form class="sidebar-component-form space-y-4" data-action-url="${action_url}" data-component-id="${component_id}">
                <input type="hidden" name="current_page" value="${current_page}">
        `;

            editable_fields.forEach(field => {
                const currentValue = (current_values[field] || '').replace(/"/g, '&quot;');
                const placeholder = this.getPlaceholderForField(field);
                const helpText = this.getHelpTextForField(field);

                formHtml += `
                <div class="form-field">
                    <label class="block text-sm font-medium text-gray-700 mb-1">
                        ${this.humanizeField(field)}
                    </label>
            `;

                if (field.toLowerCase().includes('description') ||
                  field.toLowerCase().includes('content') ||
                  field.toLowerCase().includes('bio')) {
                    formHtml += `
                    <textarea name="content[${field}]"
                              rows="3"
                              placeholder="${placeholder}"
                              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm component-field"
                              data-field="${field}"
                              data-component="${component_id}">${current_values[field] || ''}</textarea>
                `;
                } else {
                    const inputType = field.toLowerCase().includes('email') ? 'email' :
                      field.toLowerCase().includes('phone') ? 'tel' :
                        (field.toLowerCase().includes('url') || field.toLowerCase().includes('link')) ? 'url' : 'text';

                    formHtml += `
                    <input type="${inputType}"
                           name="content[${field}]"
                           value="${currentValue}"
                           placeholder="${placeholder}"
                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm component-field"
                           data-field="${field}"
                           data-component="${component_id}">
                `;
                }

                formHtml += `
                    <p class="mt-1 text-xs text-gray-500">${helpText}</p>
                </div>
            `;
            });

            formHtml += `
                <div class="flex justify-end space-x-2 pt-4 border-t border-gray-200">
                    <button type="button" class="cancel-sidebar-btn px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="submit" class="save-sidebar-btn px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                        Save Changes
                    </button>
                </div>
            </form>
        `;

            return formHtml;
        }

        bindSidebarForm(componentData) {
            const form = document.querySelector('.sidebar-component-form');
            if (!form) return;

            // Bind form submission
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveSidebarComponent(form, componentData.component_id);
            });

            // Bind cancel button
            const cancelBtn = form.querySelector('.cancel-sidebar-btn');
            if (cancelBtn) {
                cancelBtn.addEventListener('click', () => {
                    this.hideEditSidebar();
                });
            }

            // Bind field changes for unsaved changes tracking
            form.querySelectorAll('.component-field').forEach(field => {
                field.addEventListener('input', () => {
                    this.unsavedChanges.add(componentData.component_id);
                    this.updateSaveAllButton();
                });
            });
        }

        async saveSidebarComponent(form, componentId) {
            const saveBtn = form.querySelector('.save-sidebar-btn');
            const originalText = saveBtn.textContent;

            try {
                this.setButtonLoading(saveBtn, 'Saving...');

                const formData = new FormData(form);
                const actionUrl = form.dataset.actionUrl;

                const response = await fetch(actionUrl, {
                    method: 'PATCH',
                    body: formData,
                    headers: {
                        'X-CSRF-Token': this.getCSRFToken(),
                        'Accept': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.success) {
                    this.updateComponentPreview(componentId, data.updated_content);
                    this.unsavedChanges.delete(componentId);
                    this.updateSaveAllButton();
                    this.showNotification('Component updated successfully!', 'success');

                    setTimeout(() => {
                        this.hideEditSidebar();
                    }, 500);

                    this.markSidebarFieldsAsSaved(form);
                } else {
                    throw new Error(data.error || 'Unknown error occurred');
                }

            } catch (error) {
                console.error('Save error:', error);
                this.showNotification(`Error: ${error.message}`, 'error');
                this.markSidebarFieldsAsError(form);
            } finally {
                this.setButtonNormal(saveBtn, originalText);
            }
        }

        async saveAllComponents() {
            const sidebar = document.getElementById('edit-sidebar');

            // If sidebar is open, save that component first
            if (sidebar && !sidebar.classList.contains('hidden')) {
                const sidebarForm = document.querySelector('.sidebar-component-form');
                if (sidebarForm) {
                    const componentId = sidebarForm.dataset.componentId;
                    await this.saveSidebarComponent(sidebarForm, componentId);
                }
            }

            if (this.unsavedChanges.size === 0) {
                this.showNotification('No changes to save', 'info');
                return;
            }

            this.showNotification('All changes saved successfully!', 'success');
            this.unsavedChanges.clear();
            this.updateSaveAllButton();
        }

        autoSave() {
            console.log('Auto-saving...');
            this.saveAllComponents();
            this.showNotification('Auto-saved', 'info');
        }

        updateComponentPreview(componentId, updatedContent) {
            const previewElement = document.querySelector(`#component-${componentId} .clickable-preview`);
            if (previewElement && updatedContent) {
                // Fade out
                previewElement.style.opacity = '0.5';

                setTimeout(() => {
                    // Find the content area (skip the overlay)
                    const contentArea = previewElement.querySelector('div:not(.edit-overlay)');
                    if (contentArea) {
                        contentArea.outerHTML = updatedContent;
                    } else {
                        previewElement.innerHTML = updatedContent +
                          `<div class="edit-overlay absolute inset-0 bg-blue-500 bg-opacity-0 hover:bg-opacity-5 transition-all duration-200 rounded-lg flex items-center justify-center opacity-0 hover:opacity-100 pointer-events-none">
                            <span class="bg-blue-600 text-white px-4 py-2 rounded-full text-sm font-medium shadow-lg">✏️ Click to edit</span>
                        </div>`;
                    }
                    // Fade back in
                    previewElement.style.opacity = '1';
                }, 150);
            }
        }

        markSidebarFieldsAsSaved(form) {
            form.querySelectorAll('.component-field').forEach(field => {
                field.classList.remove('field-error');
                field.classList.add('field-success');

                // Remove error messages
                const errorElement = field.parentNode.querySelector('.field-error-message');
                if (errorElement) {
                    errorElement.remove();
                }
            });

            // Remove success styling after 2 seconds
            setTimeout(() => {
                form.querySelectorAll('.component-field').forEach(field => {
                    field.classList.remove('field-success');
                });
            }, 2000);
        }

        markSidebarFieldsAsError(form) {
            form.querySelectorAll('.component-field').forEach(field => {
                field.classList.add('field-error');
                field.classList.remove('field-success');
            });
        }

        updateSaveAllButton() {
            const saveAllBtn = document.getElementById('save-all-btn');
            if (saveAllBtn) {
                if (this.unsavedChanges.size > 0) {
                    saveAllBtn.textContent = `Save All Changes (${this.unsavedChanges.size})`;
                    saveAllBtn.classList.add('bg-red-600', 'hover:bg-red-700');
                    saveAllBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
                } else {
                    saveAllBtn.textContent = 'Save All Changes';
                    saveAllBtn.classList.remove('bg-red-600', 'hover:bg-red-700');
                    saveAllBtn.classList.add('bg-green-600', 'hover:bg-green-700');
                }
            }
        }

        setButtonLoading(button, text) {
            button.disabled = true;
            button.innerHTML = `<span class="loading-spinner mr-2"></span>${text}`;
        }

        setButtonNormal(button, text) {
            button.disabled = false;
            button.textContent = text;
        }

        getCSRFToken() {
            const token = document.querySelector('[name="csrf-token"]');
            return token ? token.content : '';
        }

        showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-4 py-3 rounded-md text-white z-50 shadow-lg max-w-sm ${
              type === 'success' ? 'bg-green-500' :
                type === 'error' ? 'bg-red-500' :
                  type === 'warning' ? 'bg-yellow-500' :
                    'bg-blue-500'
            }`;

            notification.innerHTML = `
            <div class="flex items-center justify-between">
                <span class="text-sm font-medium">${message}</span>
                <button class="ml-3 text-white hover:text-gray-200" onclick="this.parentElement.parentElement.remove()">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        `;

            notification.style.animation = 'slideInRight 0.3s ease-out';
            document.body.appendChild(notification);

            // Auto-remove after 5 seconds
            setTimeout(() => {
                notification.style.animation = 'slideOutRight 0.3s ease-in';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.remove();
                    }
                }, 300);
            }, 5000);
        }

        humanizeField(field) {
            return field.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        }

        getPlaceholderForField(field) {
            const placeholders = {
                'title': 'Your Company Name',
                'headline': 'Your Company Name',
                'subtitle': 'Your tagline or subtitle',
                'subheadline': 'Your tagline or subtitle',
                'description': 'Describe your business or service...',
                'content': 'Describe your business or service...',
                'email': 'your.email@example.com',
                'phone': '(555) 123-4567',
                'address': 'Your business address',
                'cta_text': 'Contact Us',
                'cta_link': 'https://example.com',
                'link': 'https://example.com',
                'name': 'Your Name',
                'company': 'Your Company'
            };

            return placeholders[field.toLowerCase()] || `Enter your ${field.toLowerCase().replace(/_/g, ' ')}`;
        }

        getHelpTextForField(field) {
            const helpTexts = {
                'title': 'This will be the main heading visible to visitors',
                'headline': 'This will be the main heading visible to visitors',
                'subtitle': 'Supporting text that appears below the main heading',
                'subheadline': 'Supporting text that appears below the main heading',
                'description': 'Main content area - you can use multiple lines',
                'content': 'Main content area - you can use multiple lines',
                'email': 'Contact email address - must be a valid email format',
                'phone': 'Contact phone number - include area code',
                'cta_text': 'Text for buttons or call-to-action links',
                'cta_link': 'URL where the button or link should go (include https://)',
                'link': 'URL where the button or link should go (include https://)',
                'address': 'Your physical business address'
            };

            return helpTexts[field.toLowerCase()] || `Content for the ${field.toLowerCase().replace(/_/g, ' ')} field`;
        }
    }

    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        // Only initialize if we're on the website edit page
        if (document.querySelector('.component-container')) {
            window.websiteBuilder = new WebsiteBuilder();
            console.log('Website Builder initialized');
        }
    });

    // Sidebar toggle functionality with debugging
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded, looking for elements...');

        const toggleButton = document.querySelector('.sidebar-pages-toggle');
        const sidebar = document.querySelector('#pages-sidebar');
        const editPreviewSection = document.querySelector('.edit-preview-section');

        console.log('Toggle button:', toggleButton);
        console.log('Sidebar:', sidebar);
        console.log('Edit preview section:', editPreviewSection);

        if (!toggleButton) {
            console.error('Toggle button not found! Make sure element with class "sidebar-pages-toggle" exists');
            return;
        }

        if (!sidebar) {
            console.error('Sidebar not found! Make sure element with id "pages-sidebar" exists');
            return;
        }

        console.log('Both elements found, adding click listener...');

        toggleButton.addEventListener('click', function(e) {
            console.log('Toggle button clicked!');
            e.preventDefault(); // Prevent default action if it's a link/button

            // Toggle the 'hidden' class instead of style.display
            sidebar.classList.toggle('hidden');

            if (sidebar.classList.contains('hidden')) {
                console.log('Hiding sidebar');
                // Remove sidebar-open class when closing
                if (editPreviewSection) {
                    editPreviewSection.classList.remove('sidebar-open');
                }
            } else {
                console.log('Showing sidebar');
                // Add sidebar-open class when opening
                if (editPreviewSection) {
                    editPreviewSection.classList.add('sidebar-open');
                }
            }
        });

        // Close sidebar when clicking the close button
        const closeButton = document.querySelector('#close-sidebar-btn');
        if (closeButton) {
            closeButton.addEventListener('click', function(e) {
                e.preventDefault();
                sidebar.classList.add('hidden');
                // Remove sidebar-open class when closing
                if (editPreviewSection) {
                    editPreviewSection.classList.remove('sidebar-open');
                }
                console.log('Close button clicked - hiding sidebar');
            });
        }

        // Close sidebar when clicking outside of it
        document.addEventListener('click', function(e) {
            // Check if sidebar is visible and click is outside both sidebar and toggle button
            if (!sidebar.classList.contains('hidden') &&
              !sidebar.contains(e.target) &&
              !toggleButton.contains(e.target)) {
                sidebar.classList.add('hidden');
                // Remove sidebar-open class when closing
                if (editPreviewSection) {
                    editPreviewSection.classList.remove('sidebar-open');
                }
                console.log('Clicked outside - hiding sidebar');
            }
        });
    });
</script>
</body>
</html>